# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: MYSQL_DB
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_PASSWORD
            - name: MYSQL_ROOT_PASSWORD
              value: rootpassword
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          emptyDir: {}

---

# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
  clusterIP: None  # Headless service for direct pod-to-pod DB connection

---

# Django Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messaging-app
  template:
    metadata:
      labels:
        app: messaging-app
    spec:
      containers:
        - name: messaging-app
          image: shimyy/messaging-app:latest
          command: ["python3", "manage.py", "runserver", "0.0.0.0:8000"]
          ports:
            - containerPort: 8000
          env:
            - name: MYSQL_HOST
              value: mysql
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DB
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: MYSQL_DB
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_PASSWORD

---

# Django Service (ClusterIP - internal only)
apiVersion: v1
kind: Service
metadata:
  name: messaging-service
spec:
  selector:
    app: messaging-app
  ports:
    - port: 8000
      targetPort: 8000
  type: ClusterIP
